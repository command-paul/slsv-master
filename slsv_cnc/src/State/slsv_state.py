# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_slsv_state', [dirname(__file__)])
        except ImportError:
            import _slsv_state
            return _slsv_state
        if fp is not None:
            try:
                _mod = imp.load_module('_slsv_state', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _slsv_state = swig_import_helper()
    del swig_import_helper
else:
    import _slsv_state
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _slsv_state.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _slsv_state.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _slsv_state.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _slsv_state.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _slsv_state.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _slsv_state.SwigPyIterator_equal(self, x)

    def copy(self):
        return _slsv_state.SwigPyIterator_copy(self)

    def next(self):
        return _slsv_state.SwigPyIterator_next(self)

    def __next__(self):
        return _slsv_state.SwigPyIterator___next__(self)

    def previous(self):
        return _slsv_state.SwigPyIterator_previous(self)

    def advance(self, n):
        return _slsv_state.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _slsv_state.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _slsv_state.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _slsv_state.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _slsv_state.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _slsv_state.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _slsv_state.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _slsv_state.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class HartVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HartVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HartVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _slsv_state.HartVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _slsv_state.HartVector___nonzero__(self)

    def __bool__(self):
        return _slsv_state.HartVector___bool__(self)

    def __len__(self):
        return _slsv_state.HartVector___len__(self)

    def __getslice__(self, i, j):
        return _slsv_state.HartVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _slsv_state.HartVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _slsv_state.HartVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _slsv_state.HartVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _slsv_state.HartVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _slsv_state.HartVector___setitem__(self, *args)

    def pop(self):
        return _slsv_state.HartVector_pop(self)

    def append(self, x):
        return _slsv_state.HartVector_append(self, x)

    def empty(self):
        return _slsv_state.HartVector_empty(self)

    def size(self):
        return _slsv_state.HartVector_size(self)

    def swap(self, v):
        return _slsv_state.HartVector_swap(self, v)

    def begin(self):
        return _slsv_state.HartVector_begin(self)

    def end(self):
        return _slsv_state.HartVector_end(self)

    def rbegin(self):
        return _slsv_state.HartVector_rbegin(self)

    def rend(self):
        return _slsv_state.HartVector_rend(self)

    def clear(self):
        return _slsv_state.HartVector_clear(self)

    def get_allocator(self):
        return _slsv_state.HartVector_get_allocator(self)

    def pop_back(self):
        return _slsv_state.HartVector_pop_back(self)

    def erase(self, *args):
        return _slsv_state.HartVector_erase(self, *args)

    def __init__(self, *args):
        this = _slsv_state.new_HartVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _slsv_state.HartVector_push_back(self, x)

    def front(self):
        return _slsv_state.HartVector_front(self)

    def back(self):
        return _slsv_state.HartVector_back(self)

    def assign(self, n, x):
        return _slsv_state.HartVector_assign(self, n, x)

    def resize(self, *args):
        return _slsv_state.HartVector_resize(self, *args)

    def insert(self, *args):
        return _slsv_state.HartVector_insert(self, *args)

    def reserve(self, n):
        return _slsv_state.HartVector_reserve(self, n)

    def capacity(self):
        return _slsv_state.HartVector_capacity(self)
    __swig_destroy__ = _slsv_state.delete_HartVector
    __del__ = lambda self: None
HartVector_swigregister = _slsv_state.HartVector_swigregister
HartVector_swigregister(HartVector)

class MemVector0(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MemVector0, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MemVector0, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _slsv_state.MemVector0_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _slsv_state.MemVector0___nonzero__(self)

    def __bool__(self):
        return _slsv_state.MemVector0___bool__(self)

    def __len__(self):
        return _slsv_state.MemVector0___len__(self)

    def __getslice__(self, i, j):
        return _slsv_state.MemVector0___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _slsv_state.MemVector0___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _slsv_state.MemVector0___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _slsv_state.MemVector0___delitem__(self, *args)

    def __getitem__(self, *args):
        return _slsv_state.MemVector0___getitem__(self, *args)

    def __setitem__(self, *args):
        return _slsv_state.MemVector0___setitem__(self, *args)

    def pop(self):
        return _slsv_state.MemVector0_pop(self)

    def append(self, x):
        return _slsv_state.MemVector0_append(self, x)

    def empty(self):
        return _slsv_state.MemVector0_empty(self)

    def size(self):
        return _slsv_state.MemVector0_size(self)

    def swap(self, v):
        return _slsv_state.MemVector0_swap(self, v)

    def begin(self):
        return _slsv_state.MemVector0_begin(self)

    def end(self):
        return _slsv_state.MemVector0_end(self)

    def rbegin(self):
        return _slsv_state.MemVector0_rbegin(self)

    def rend(self):
        return _slsv_state.MemVector0_rend(self)

    def clear(self):
        return _slsv_state.MemVector0_clear(self)

    def get_allocator(self):
        return _slsv_state.MemVector0_get_allocator(self)

    def pop_back(self):
        return _slsv_state.MemVector0_pop_back(self)

    def erase(self, *args):
        return _slsv_state.MemVector0_erase(self, *args)

    def __init__(self, *args):
        this = _slsv_state.new_MemVector0(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _slsv_state.MemVector0_push_back(self, x)

    def front(self):
        return _slsv_state.MemVector0_front(self)

    def back(self):
        return _slsv_state.MemVector0_back(self)

    def assign(self, n, x):
        return _slsv_state.MemVector0_assign(self, n, x)

    def resize(self, *args):
        return _slsv_state.MemVector0_resize(self, *args)

    def insert(self, *args):
        return _slsv_state.MemVector0_insert(self, *args)

    def reserve(self, n):
        return _slsv_state.MemVector0_reserve(self, n)

    def capacity(self):
        return _slsv_state.MemVector0_capacity(self)
    __swig_destroy__ = _slsv_state.delete_MemVector0
    __del__ = lambda self: None
MemVector0_swigregister = _slsv_state.MemVector0_swigregister
MemVector0_swigregister(MemVector0)

class IntVec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVec, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _slsv_state.IntVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _slsv_state.IntVec___nonzero__(self)

    def __bool__(self):
        return _slsv_state.IntVec___bool__(self)

    def __len__(self):
        return _slsv_state.IntVec___len__(self)

    def __getslice__(self, i, j):
        return _slsv_state.IntVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _slsv_state.IntVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _slsv_state.IntVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _slsv_state.IntVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _slsv_state.IntVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _slsv_state.IntVec___setitem__(self, *args)

    def pop(self):
        return _slsv_state.IntVec_pop(self)

    def append(self, x):
        return _slsv_state.IntVec_append(self, x)

    def empty(self):
        return _slsv_state.IntVec_empty(self)

    def size(self):
        return _slsv_state.IntVec_size(self)

    def swap(self, v):
        return _slsv_state.IntVec_swap(self, v)

    def begin(self):
        return _slsv_state.IntVec_begin(self)

    def end(self):
        return _slsv_state.IntVec_end(self)

    def rbegin(self):
        return _slsv_state.IntVec_rbegin(self)

    def rend(self):
        return _slsv_state.IntVec_rend(self)

    def clear(self):
        return _slsv_state.IntVec_clear(self)

    def get_allocator(self):
        return _slsv_state.IntVec_get_allocator(self)

    def pop_back(self):
        return _slsv_state.IntVec_pop_back(self)

    def erase(self, *args):
        return _slsv_state.IntVec_erase(self, *args)

    def __init__(self, *args):
        this = _slsv_state.new_IntVec(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _slsv_state.IntVec_push_back(self, x)

    def front(self):
        return _slsv_state.IntVec_front(self)

    def back(self):
        return _slsv_state.IntVec_back(self)

    def assign(self, n, x):
        return _slsv_state.IntVec_assign(self, n, x)

    def resize(self, *args):
        return _slsv_state.IntVec_resize(self, *args)

    def insert(self, *args):
        return _slsv_state.IntVec_insert(self, *args)

    def reserve(self, n):
        return _slsv_state.IntVec_reserve(self, n)

    def capacity(self):
        return _slsv_state.IntVec_capacity(self)
    __swig_destroy__ = _slsv_state.delete_IntVec
    __del__ = lambda self: None
IntVec_swigregister = _slsv_state.IntVec_swigregister
IntVec_swigregister(IntVec)

class NHSVVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NHSVVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NHSVVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _slsv_state.NHSVVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _slsv_state.NHSVVector___nonzero__(self)

    def __bool__(self):
        return _slsv_state.NHSVVector___bool__(self)

    def __len__(self):
        return _slsv_state.NHSVVector___len__(self)

    def __getslice__(self, i, j):
        return _slsv_state.NHSVVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _slsv_state.NHSVVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _slsv_state.NHSVVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _slsv_state.NHSVVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _slsv_state.NHSVVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _slsv_state.NHSVVector___setitem__(self, *args)

    def pop(self):
        return _slsv_state.NHSVVector_pop(self)

    def append(self, x):
        return _slsv_state.NHSVVector_append(self, x)

    def empty(self):
        return _slsv_state.NHSVVector_empty(self)

    def size(self):
        return _slsv_state.NHSVVector_size(self)

    def swap(self, v):
        return _slsv_state.NHSVVector_swap(self, v)

    def begin(self):
        return _slsv_state.NHSVVector_begin(self)

    def end(self):
        return _slsv_state.NHSVVector_end(self)

    def rbegin(self):
        return _slsv_state.NHSVVector_rbegin(self)

    def rend(self):
        return _slsv_state.NHSVVector_rend(self)

    def clear(self):
        return _slsv_state.NHSVVector_clear(self)

    def get_allocator(self):
        return _slsv_state.NHSVVector_get_allocator(self)

    def pop_back(self):
        return _slsv_state.NHSVVector_pop_back(self)

    def erase(self, *args):
        return _slsv_state.NHSVVector_erase(self, *args)

    def __init__(self, *args):
        this = _slsv_state.new_NHSVVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _slsv_state.NHSVVector_push_back(self, x)

    def front(self):
        return _slsv_state.NHSVVector_front(self)

    def back(self):
        return _slsv_state.NHSVVector_back(self)

    def assign(self, n, x):
        return _slsv_state.NHSVVector_assign(self, n, x)

    def resize(self, *args):
        return _slsv_state.NHSVVector_resize(self, *args)

    def insert(self, *args):
        return _slsv_state.NHSVVector_insert(self, *args)

    def reserve(self, n):
        return _slsv_state.NHSVVector_reserve(self, n)

    def capacity(self):
        return _slsv_state.NHSVVector_capacity(self)
    __swig_destroy__ = _slsv_state.delete_NHSVVector
    __del__ = lambda self: None
NHSVVector_swigregister = _slsv_state.NHSVVector_swigregister
NHSVVector_swigregister(NHSVVector)

class riscv(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, riscv, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, riscv, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _slsv_state.new_riscv()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _slsv_state.delete_riscv
    __del__ = lambda self: None
    __swig_setmethods__["HART_Vec"] = _slsv_state.riscv_HART_Vec_set
    __swig_getmethods__["HART_Vec"] = _slsv_state.riscv_HART_Vec_get
    if _newclass:
        HART_Vec = _swig_property(_slsv_state.riscv_HART_Vec_get, _slsv_state.riscv_HART_Vec_set)
    __swig_setmethods__["Memory"] = _slsv_state.riscv_Memory_set
    __swig_getmethods__["Memory"] = _slsv_state.riscv_Memory_get
    if _newclass:
        Memory = _swig_property(_slsv_state.riscv_Memory_get, _slsv_state.riscv_Memory_set)
    __swig_setmethods__["NHSV"] = _slsv_state.riscv_NHSV_set
    __swig_getmethods__["NHSV"] = _slsv_state.riscv_NHSV_get
    if _newclass:
        NHSV = _swig_property(_slsv_state.riscv_NHSV_get, _slsv_state.riscv_NHSV_set)

    def addHART(self):
        return _slsv_state.riscv_addHART(self)

    def addMemory(self):
        return _slsv_state.riscv_addMemory(self)

    def addNHSV(self):
        return _slsv_state.riscv_addNHSV(self)
riscv_swigregister = _slsv_state.riscv_swigregister
riscv_swigregister(riscv)

class risc_v_HART(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, risc_v_HART, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, risc_v_HART, name)
    __repr__ = _swig_repr
    __swig_setmethods__["GPR"] = _slsv_state.risc_v_HART_GPR_set
    __swig_getmethods__["GPR"] = _slsv_state.risc_v_HART_GPR_get
    if _newclass:
        GPR = _swig_property(_slsv_state.risc_v_HART_GPR_get, _slsv_state.risc_v_HART_GPR_set)

    def __init__(self):
        this = _slsv_state.new_risc_v_HART()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _slsv_state.delete_risc_v_HART
    __del__ = lambda self: None
risc_v_HART_swigregister = _slsv_state.risc_v_HART_swigregister
risc_v_HART_swigregister(risc_v_HART)

class nonHARTStateVariables(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nonHARTStateVariables, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nonHARTStateVariables, name)
    __repr__ = _swig_repr
    __swig_setmethods__["variable"] = _slsv_state.nonHARTStateVariables_variable_set
    __swig_getmethods__["variable"] = _slsv_state.nonHARTStateVariables_variable_get
    if _newclass:
        variable = _swig_property(_slsv_state.nonHARTStateVariables_variable_get, _slsv_state.nonHARTStateVariables_variable_set)

    def __init__(self):
        this = _slsv_state.new_nonHARTStateVariables()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _slsv_state.delete_nonHARTStateVariables
    __del__ = lambda self: None
nonHARTStateVariables_swigregister = _slsv_state.nonHARTStateVariables_swigregister
nonHARTStateVariables_swigregister(nonHARTStateVariables)

class memoryMappedDevice(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, memoryMappedDevice, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, memoryMappedDevice, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _slsv_state.delete_memoryMappedDevice
    __del__ = lambda self: None
memoryMappedDevice_swigregister = _slsv_state.memoryMappedDevice_swigregister
memoryMappedDevice_swigregister(memoryMappedDevice)

# This file is compatible with both classic and new-style classes.


